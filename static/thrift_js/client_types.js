/* eslint-disable */
//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift

// eslint-disable-next-line no-unused-vars
var ttypes = module.exports = {}
task3_result = module.exports.task3_result = function (args) {
  this.name = null
  this.result = null
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name
    }
    if (args.result !== undefined) {
      this.result = args.result
    }
  }
}
task3_result.prototype = {}
task3_result.prototype.read = function (input) {
  input.readStructBegin()
  while (true) {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size0 = 0
          var _rtmp34
          this.result = []
          var _etype3 = 0
          _rtmp34 = input.readListBegin()
          _etype3 = _rtmp34.etype
          _size0 = _rtmp34.size
          for (var _i5 = 0; _i5 < _size0; ++_i5) {
            var elem6 = null
            elem6 = input.readDouble()
            this.result.push(elem6)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

task3_result.prototype.write = function (output) {
  output.writeStructBegin('task3_result')
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.LIST, 2)
    output.writeListBegin(Thrift.Type.DOUBLE, this.result.length)
    for (var iter7 in this.result) {
      if (this.result.hasOwnProperty(iter7)) {
        iter7 = this.result[iter7]
        output.writeDouble(iter7)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

task4_result = module.exports.task4_result = function (args) {
  this.name = null
  this.result = null
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name
    }
    if (args.result !== undefined) {
      this.result = args.result
    }
  }
}
task4_result.prototype = {}
task4_result.prototype.read = function (input) {
  input.readStructBegin()
  while (true) {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString()
        } else {
          input.skip(ftype)
        }
        break
      case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size8 = 0
          var _rtmp312
          this.result = []
          var _etype11 = 0
          _rtmp312 = input.readListBegin()
          _etype11 = _rtmp312.etype
          _size8 = _rtmp312.size
          for (var _i13 = 0; _i13 < _size8; ++_i13) {
            var elem14 = null
            elem14 = input.readDouble()
            this.result.push(elem14)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

task4_result.prototype.write = function (output) {
  output.writeStructBegin('task4_result')
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1)
    output.writeString(this.name)
    output.writeFieldEnd()
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.LIST, 2)
    output.writeListBegin(Thrift.Type.DOUBLE, this.result.length)
    for (var iter15 in this.result) {
      if (this.result.hasOwnProperty(iter15)) {
        iter15 = this.result[iter15]
        output.writeDouble(iter15)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

