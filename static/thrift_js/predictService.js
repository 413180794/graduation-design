/* eslint-disable */
//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift

var ttypes = require('./client_types')
//HELPER FUNCTIONS AND STRUCTURES

// eslint-disable-next-line camelcase
predictService_seg_predict_images_task1_args = function (args) {
  this.image_paths = null
  if (args) {
    if (args.image_paths !== undefined) {
      this.image_paths = args.image_paths
    }
  }
}
predictService_seg_predict_images_task1_args.prototype = {}
predictService_seg_predict_images_task1_args.prototype.read = function (input) {
  input.readStructBegin()
  while (true) {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size16 = 0
          var _rtmp320
          this.image_paths = []
          var _etype19 = 0
          _rtmp320 = input.readListBegin()
          _etype19 = _rtmp320.etype
          _size16 = _rtmp320.size
          for (var _i21 = 0; _i21 < _size16; ++_i21) {
            var elem22 = null
            elem22 = input.readString()
            this.image_paths.push(elem22)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

predictService_seg_predict_images_task1_args.prototype.write = function (output) {
  output.writeStructBegin('predictService_seg_predict_images_task1_args')
  if (this.image_paths !== null && this.image_paths !== undefined) {
    output.writeFieldBegin('image_paths', Thrift.Type.LIST, 1)
    output.writeListBegin(Thrift.Type.STRING, this.image_paths.length)
    for (var iter23 in this.image_paths) {
      if (this.image_paths.hasOwnProperty(iter23)) {
        iter23 = this.image_paths[iter23]
        output.writeString(iter23)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

predictService_seg_predict_images_task1_result = function (args) {
  this.success = null
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success
    }
  }
}
predictService_seg_predict_images_task1_result.prototype = {}
predictService_seg_predict_images_task1_result.prototype.read = function (input) {
  input.readStructBegin()
  while (true) {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size24 = 0
          var _rtmp328
          this.success = []
          var _etype27 = 0
          _rtmp328 = input.readListBegin()
          _etype27 = _rtmp328.etype
          _size24 = _rtmp328.size
          for (var _i29 = 0; _i29 < _size24; ++_i29) {
            var elem30 = null
            elem30 = input.readString()
            this.success.push(elem30)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

predictService_seg_predict_images_task1_result.prototype.write = function (output) {
  output.writeStructBegin('predictService_seg_predict_images_task1_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter31 in this.success) {
      if (this.success.hasOwnProperty(iter31)) {
        iter31 = this.success[iter31]
        output.writeString(iter31)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

predictService_seg_predict_images_task2_args = function (args) {
  this.image_paths = null
  if (args) {
    if (args.image_paths !== undefined) {
      this.image_paths = args.image_paths
    }
  }
}
predictService_seg_predict_images_task2_args.prototype = {}
predictService_seg_predict_images_task2_args.prototype.read = function (input) {
  input.readStructBegin()
  while (true) {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size32 = 0
          var _rtmp336
          this.image_paths = []
          var _etype35 = 0
          _rtmp336 = input.readListBegin()
          _etype35 = _rtmp336.etype
          _size32 = _rtmp336.size
          for (var _i37 = 0; _i37 < _size32; ++_i37) {
            var elem38 = null
            elem38 = input.readString()
            this.image_paths.push(elem38)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

predictService_seg_predict_images_task2_args.prototype.write = function (output) {
  output.writeStructBegin('predictService_seg_predict_images_task2_args')
  if (this.image_paths !== null && this.image_paths !== undefined) {
    output.writeFieldBegin('image_paths', Thrift.Type.LIST, 1)
    output.writeListBegin(Thrift.Type.STRING, this.image_paths.length)
    for (var iter39 in this.image_paths) {
      if (this.image_paths.hasOwnProperty(iter39)) {
        iter39 = this.image_paths[iter39]
        output.writeString(iter39)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

predictService_seg_predict_images_task2_result = function (args) {
  this.success = null
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success
    }
  }
}
predictService_seg_predict_images_task2_result.prototype = {}
predictService_seg_predict_images_task2_result.prototype.read = function (input) {
  input.readStructBegin()
  while (true) {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size40 = 0
          var _rtmp344
          this.success = []
          var _etype43 = 0
          _rtmp344 = input.readListBegin()
          _etype43 = _rtmp344.etype
          _size40 = _rtmp344.size
          for (var _i45 = 0; _i45 < _size40; ++_i45) {
            var elem46 = null
            elem46 = input.readString()
            this.success.push(elem46)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

predictService_seg_predict_images_task2_result.prototype.write = function (output) {
  output.writeStructBegin('predictService_seg_predict_images_task2_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRING, this.success.length)
    for (var iter47 in this.success) {
      if (this.success.hasOwnProperty(iter47)) {
        iter47 = this.success[iter47]
        output.writeString(iter47)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

predictService_cls_predict_images_task3_args = function (args) {
  this.image_paths = null
  if (args) {
    if (args.image_paths !== undefined) {
      this.image_paths = args.image_paths
    }
  }
}
predictService_cls_predict_images_task3_args.prototype = {}
predictService_cls_predict_images_task3_args.prototype.read = function (input) {
  input.readStructBegin()
  while (true) {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size48 = 0
          var _rtmp352
          this.image_paths = []
          var _etype51 = 0
          _rtmp352 = input.readListBegin()
          _etype51 = _rtmp352.etype
          _size48 = _rtmp352.size
          for (var _i53 = 0; _i53 < _size48; ++_i53) {
            var elem54 = null
            elem54 = input.readString()
            this.image_paths.push(elem54)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

predictService_cls_predict_images_task3_args.prototype.write = function (output) {
  output.writeStructBegin('predictService_cls_predict_images_task3_args')
  if (this.image_paths !== null && this.image_paths !== undefined) {
    output.writeFieldBegin('image_paths', Thrift.Type.LIST, 1)
    output.writeListBegin(Thrift.Type.STRING, this.image_paths.length)
    for (var iter55 in this.image_paths) {
      if (this.image_paths.hasOwnProperty(iter55)) {
        iter55 = this.image_paths[iter55]
        output.writeString(iter55)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

predictService_cls_predict_images_task3_result = function (args) {
  this.success = null
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success
    }
  }
}
predictService_cls_predict_images_task3_result.prototype = {}
predictService_cls_predict_images_task3_result.prototype.read = function (input) {
  input.readStructBegin()
  while (true) {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size56 = 0
          var _rtmp360
          this.success = []
          var _etype59 = 0
          _rtmp360 = input.readListBegin()
          _etype59 = _rtmp360.etype
          _size56 = _rtmp360.size
          for (var _i61 = 0; _i61 < _size56; ++_i61) {
            var elem62 = null
            elem62 = new ttypes.task3_result()
            elem62.read(input)
            this.success.push(elem62)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

predictService_cls_predict_images_task3_result.prototype.write = function (output) {
  output.writeStructBegin('predictService_cls_predict_images_task3_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter63 in this.success) {
      if (this.success.hasOwnProperty(iter63)) {
        iter63 = this.success[iter63]
        iter63.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

predictService_cls_predict_images_task4_args = function (args) {
  this.image_paths = null
  if (args) {
    if (args.image_paths !== undefined) {
      this.image_paths = args.image_paths
    }
  }
}
predictService_cls_predict_images_task4_args.prototype = {}
predictService_cls_predict_images_task4_args.prototype.read = function (input) {
  input.readStructBegin()
  while (true) {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.LIST) {
          var _size64 = 0
          var _rtmp368
          this.image_paths = []
          var _etype67 = 0
          _rtmp368 = input.readListBegin()
          _etype67 = _rtmp368.etype
          _size64 = _rtmp368.size
          for (var _i69 = 0; _i69 < _size64; ++_i69) {
            var elem70 = null
            elem70 = input.readString()
            this.image_paths.push(elem70)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

predictService_cls_predict_images_task4_args.prototype.write = function (output) {
  output.writeStructBegin('predictService_cls_predict_images_task4_args')
  if (this.image_paths !== null && this.image_paths !== undefined) {
    output.writeFieldBegin('image_paths', Thrift.Type.LIST, 1)
    output.writeListBegin(Thrift.Type.STRING, this.image_paths.length)
    for (var iter71 in this.image_paths) {
      if (this.image_paths.hasOwnProperty(iter71)) {
        iter71 = this.image_paths[iter71]
        output.writeString(iter71)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

predictService_cls_predict_images_task4_result = function (args) {
  this.success = null
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success
    }
  }
}
predictService_cls_predict_images_task4_result.prototype = {}
predictService_cls_predict_images_task4_result.prototype.read = function (input) {
  input.readStructBegin()
  while (true) {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid = ret.fid
    if (ftype == Thrift.Type.STOP) {
      break
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size72 = 0
          var _rtmp376
          this.success = []
          var _etype75 = 0
          _rtmp376 = input.readListBegin()
          _etype75 = _rtmp376.etype
          _size72 = _rtmp376.size
          for (var _i77 = 0; _i77 < _size72; ++_i77) {
            var elem78 = null
            elem78 = new ttypes.task4_result()
            elem78.read(input)
            this.success.push(elem78)
          }
          input.readListEnd()
        } else {
          input.skip(ftype)
        }
        break
      case 0:
        input.skip(ftype)
        break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

predictService_cls_predict_images_task4_result.prototype.write = function (output) {
  output.writeStructBegin('predictService_cls_predict_images_task4_result')
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0)
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length)
    for (var iter79 in this.success) {
      if (this.success.hasOwnProperty(iter79)) {
        iter79 = this.success[iter79]
        iter79.write(output)
      }
    }
    output.writeListEnd()
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

predictServiceClient = exports.Client = function (output, pClass) {
  this.output = output
  this.pClass = pClass
  this.seqid = 0
  this._reqs = {}
}
predictServiceClient.prototype = {}
predictServiceClient.prototype.seg_predict_images_task1 = function (image_paths, callback) {
  this.seqid += 1
  this._reqs[this.seqid] = callback
  this.send_seg_predict_images_task1(image_paths)
}

predictServiceClient.prototype.send_seg_predict_images_task1 = function (image_paths) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('seg_predict_images_task1', Thrift.MessageType.CALL, this.seqid)
  var args = new predictService_seg_predict_images_task1_args()
  args.image_paths = image_paths
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

predictServiceClient.prototype.recv_seg_predict_images_task1 = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {
  }
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new predictService_seg_predict_images_task1_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('seg_predict_images_task1 failed: unknown result')
}
predictServiceClient.prototype.seg_predict_images_task2 = function (image_paths, callback) {
  this.seqid += 1
  this._reqs[this.seqid] = callback
  this.send_seg_predict_images_task2(image_paths)
}

predictServiceClient.prototype.send_seg_predict_images_task2 = function (image_paths) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('seg_predict_images_task2', Thrift.MessageType.CALL, this.seqid)
  var args = new predictService_seg_predict_images_task2_args()
  args.image_paths = image_paths
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

predictServiceClient.prototype.recv_seg_predict_images_task2 = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {
  }
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new predictService_seg_predict_images_task2_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('seg_predict_images_task2 failed: unknown result')
}
predictServiceClient.prototype.cls_predict_images_task3 = function (image_paths, callback) {
  this.seqid += 1
  this._reqs[this.seqid] = callback
  this.send_cls_predict_images_task3(image_paths)
}

predictServiceClient.prototype.send_cls_predict_images_task3 = function (image_paths) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('cls_predict_images_task3', Thrift.MessageType.CALL, this.seqid)
  var args = new predictService_cls_predict_images_task3_args()
  args.image_paths = image_paths
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

predictServiceClient.prototype.recv_cls_predict_images_task3 = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {
  }
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new predictService_cls_predict_images_task3_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('cls_predict_images_task3 failed: unknown result')
}
predictServiceClient.prototype.cls_predict_images_task4 = function (image_paths, callback) {
  this.seqid += 1
  this._reqs[this.seqid] = callback
  this.send_cls_predict_images_task4(image_paths)
}

predictServiceClient.prototype.send_cls_predict_images_task4 = function (image_paths) {
  var output = new this.pClass(this.output)
  output.writeMessageBegin('cls_predict_images_task4', Thrift.MessageType.CALL, this.seqid)
  var args = new predictService_cls_predict_images_task4_args()
  args.image_paths = image_paths
  args.write(output)
  output.writeMessageEnd()
  return this.output.flush()
}

predictServiceClient.prototype.recv_cls_predict_images_task4 = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {
  }
  delete this._reqs[rseqid]
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException()
    x.read(input)
    input.readMessageEnd()
    return callback(x)
  }
  var result = new predictService_cls_predict_images_task4_result()
  result.read(input)
  input.readMessageEnd()

  if (null !== result.success) {
    return callback(null, result.success)
  }
  return callback('cls_predict_images_task4 failed: unknown result')
}
predictServiceProcessor = exports.Processor = function (handler) {
  this._handler = handler
}
predictServiceProcessor.prototype.process = function (input, output) {
  var r = input.readMessageBegin()
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output)
  } else {
    input.skip(Thrift.Type.STRUCT)
    input.readMessageEnd()
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname)
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid)
    x.write(output)
    output.writeMessageEnd()
    output.flush()
  }
}

predictServiceProcessor.prototype.process_seg_predict_images_task1 = function (seqid, input, output) {
  var args = new predictService_seg_predict_images_task1_args()
  args.read(input)
  input.readMessageEnd()
  this._handler.seg_predict_images_task1(args.image_paths, function (err, result) {
    var result = new predictService_seg_predict_images_task1_result((err != null ? err : {success: result}))
    output.writeMessageBegin('seg_predict_images_task1', Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

predictServiceProcessor.prototype.process_seg_predict_images_task2 = function (seqid, input, output) {
  var args = new predictService_seg_predict_images_task2_args()
  args.read(input)
  input.readMessageEnd()
  this._handler.seg_predict_images_task2(args.image_paths, function (err, result) {
    var result = new predictService_seg_predict_images_task2_result((err != null ? err : {success: result}))
    output.writeMessageBegin('seg_predict_images_task2', Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

predictServiceProcessor.prototype.process_cls_predict_images_task3 = function (seqid, input, output) {
  var args = new predictService_cls_predict_images_task3_args()
  args.read(input)
  input.readMessageEnd()
  this._handler.cls_predict_images_task3(args.image_paths, function (err, result) {
    var result = new predictService_cls_predict_images_task3_result((err != null ? err : {success: result}))
    output.writeMessageBegin('cls_predict_images_task3', Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

predictServiceProcessor.prototype.process_cls_predict_images_task4 = function (seqid, input, output) {
  var args = new predictService_cls_predict_images_task4_args()
  args.read(input)
  input.readMessageEnd()
  this._handler.cls_predict_images_task4(args.image_paths, function (err, result) {
    var result = new predictService_cls_predict_images_task4_result((err != null ? err : {success: result}))
    output.writeMessageBegin('cls_predict_images_task4', Thrift.MessageType.REPLY, seqid)
    result.write(output)
    output.writeMessageEnd()
    output.flush()
  })
}

